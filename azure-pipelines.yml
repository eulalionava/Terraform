# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- none

pool:
  vmImage: ubuntu-latest

variables:
- group: Terraform

steps:
- script: echo Hello, world!
  displayName: 'Run a one-line script'

- task: TerraformInstaller@1
  inputs:
    terraformVersion: 'latest'
  displayName: 'Terraform installer'

- task: AzurePowerShell@5
  inputs:
    azureSubscription: 'TESTLABS'
    ScriptType: 'InlineScript'
    Inline: |
      $ACCOUNT_KEY=(Get-AzStorageAccountKey -ResourceGroupName $(RESOURCE_GROUP_NAME) -Name $(STORAGE_ACCOUNT_NAME))[0].Value
      $env:ARM_ACCESS_KEY=$ACCOUNT_KEY
    azurePowerShellVersion: 'LatestVersion'
    pwsh: true

- task: TerraformCLI@1
  inputs:
    command: 'init'
    backendServiceArm: 'TESTLABS' 
    #backendAzureRmResourceGroupName: 'Nombre_de_tu_grupo_de_recursos'  
    #backendAzureRmStorageAccountName: 'Nombre_de_tu_cuenta_de_almacenamiento' 
    #backendAzureRmContainerName: 'Nombre_de_tu_contenedor_de_almacenamiento' 
    #backendAzureRmKey: 'Nombre_de_tu_archivo_de_estado.tfstate'  
    #allowTelemetryCollection: true
    #backendAzureRmSasToken: '$(StorageAccountAccessKey)'
  displayName: 'terraform init'

- task: TerraformCLI@1
  inputs:
    command: 'validate'
    allowTelemetryCollection: true
  displayName: 'Terraform validate'

- task: TerraformCLI@1
  inputs:
    command: 'plan'
    allowTelemetryCollection: true
  displayName: 'Teraform plan'
